{"version":3,"sources":["chess.js"],"names":["board","selected","turn","mode","gameOver","PIECE_MODELS","wK","wQ","wR","wB","wN","wP","bQ","bR","bB","bN","bP","PIECES","bK","initialBoard","renderBoard","boardDiv","document","getElementById","innerHTML","_loop","r","_loop2","c","sq","createElement","dataset","row","col","classList","add","piece","textContent","handleSquareClick","className","onclick","isValidMove","movePiece","appendChild","setTimeout","aiMove","from","to","opposite","t","color","target","dc","dir","dr","isCheckmate","abs","Math","stepC","i","stepR","step","king","R","B","N","P","moves","score","pieceValues","original","safe","rr","cc","opp","push","length","sort","a","b","best","setMode","m","resetGame"],"mappings":"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","file":"chess.min.js","sourcesContent":["// Chess game logic\r\n// 3D model filenames for each piece (for use with Three.js or similar)\r\nconst PIECE_MODELS = {\r\n    wK: 'models/wK.glb', wQ: 'models/wQ.glb', wR: 'models/wR.glb', wB: 'models/wB.glb', wN: 'models/wN.glb', wP: 'models/wP.glb',\r\n    bK: 'models/bK.glb', bQ: 'models/bQ.glb', bR: 'models/bR.glb', bB: 'models/bB.glb', bN: 'models/bN.glb', bP: 'models/bP.glb'\r\n};\r\nconst PIECES = {\r\n    wK: '♔', wQ: '♕', wR: '♖', wB: '♗', wN: '♘', wP: '♙',\r\n    bK: '♚', bQ: '♛', bR: '♜', bB: '♝', bN: '♞', bP: '♟'\r\n};\r\n\r\nlet board, selected, turn, mode, gameOver;\r\n\r\nfunction initialBoard() {\r\n    return [\r\n        ['bR','bN','bB','bQ','bK','bB','bN','bR'],\r\n        ['bP','bP','bP','bP','bP','bP','bP','bP'],\r\n        [null,null,null,null,null,null,null,null],\r\n        [null,null,null,null,null,null,null,null],\r\n        [null,null,null,null,null,null,null,null],\r\n        [null,null,null,null,null,null,null,null],\r\n        ['wP','wP','wP','wP','wP','wP','wP','wP'],\r\n        ['wR','wN','wB','wQ','wK','wB','wN','wR']\r\n    ];\r\n}\r\n\r\nfunction renderBoard() {\r\n    const boardDiv = document.getElementById('chessboard');\r\n    boardDiv.innerHTML = '';\r\n    for (let r = 0; r < 8; r++) {\r\n        for (let c = 0; c < 8; c++) {\r\n            const sq = document.createElement('div');\r\n            sq.className = 'square ' + ((r+c)%2 ? 'dark' : 'light');\r\n            sq.dataset.row = r;\r\n            sq.dataset.col = c;\r\n            if (selected && selected[0] === r && selected[1] === c) sq.classList.add('selected');\r\n            const piece = board[r][c];\r\n            if (piece) sq.textContent = PIECES[piece];\r\n            sq.onclick = () => handleSquareClick(r, c);\r\n            boardDiv.appendChild(sq);\r\n        }\r\n    }\r\n    document.getElementById('turn-indicator').textContent = gameOver ? 'Game Over' : (turn === 'w' ? 'White' : 'Black') + \"'s turn\";\r\n}\r\n\r\nfunction handleSquareClick(r, c) {\r\n    if (gameOver) return;\r\n    const piece = board[r][c];\r\n    if (selected) {\r\n        if (selected[0] === r && selected[1] === c) {\r\n            selected = null;\r\n            renderBoard();\r\n            return;\r\n        }\r\n        if (isValidMove(selected, [r, c], turn)) {\r\n            movePiece(selected, [r, c]);\r\n            selected = null;\r\n            renderBoard();\r\n            if (mode === 'ai' && turn === 'b' && !gameOver) setTimeout(aiMove, 500);\r\n        } else {\r\n            selected = null;\r\n            renderBoard();\r\n        }\r\n    } else if (piece && piece[0] === turn) {\r\n        selected = [r, c];\r\n        renderBoard();\r\n    }\r\n}\r\n\r\nfunction movePiece(from, to) {\r\n    board[to[0]][to[1]] = board[from[0]][from[1]];\r\n    board[from[0]][from[1]] = null;\r\n    if (isCheckmate(opposite(turn))) {\r\n        gameOver = true;\r\n        document.getElementById('turn-indicator').textContent = (turn === 'w' ? 'White' : 'Black') + ' wins!';\r\n    } else {\r\n        turn = opposite(turn);\r\n    }\r\n}\r\n\r\nfunction opposite(t) { return t === 'w' ? 'b' : 'w'; }\r\n\r\nfunction isValidMove(from, to, color) {\r\n    // Full chess move validation\r\n    const piece = board[from[0]][from[1]];\r\n    if (!piece || piece[0] !== color) return false;\r\n    if (from[0] === to[0] && from[1] === to[1]) return false;\r\n    const target = board[to[0]][to[1]];\r\n    if (target && target[0] === color) return false;\r\n    const dr = to[0] - from[0];\r\n    const dc = to[1] - from[1];\r\n    // Board boundaries\r\n    if (to[0] < 0 || to[0] > 7 || to[1] < 0 || to[1] > 7) return false;\r\n    // Pawn\r\n    if (piece[1] === 'P') {\r\n        const dir = color === 'w' ? -1 : 1;\r\n        // Move forward\r\n        if (dc === 0 && dr === dir && !target) return true;\r\n        // First move: two squares\r\n        if (dc === 0 && dr === 2 * dir && !target && ((color === 'w' && from[0] === 6) || (color === 'b' && from[0] === 1)) && !board[from[0] + dir][from[1]]) return true;\r\n        // Capture\r\n        if (Math.abs(dc) === 1 && dr === dir && target && target[0] !== color) return true;\r\n        // TODO: En passant\r\n        return false;\r\n    }\r\n    // Knight\r\n    if (piece[1] === 'N') {\r\n        if ((Math.abs(dr) === 2 && Math.abs(dc) === 1) || (Math.abs(dr) === 1 && Math.abs(dc) === 2)) return true;\r\n        return false;\r\n    }\r\n    // Bishop\r\n    if (piece[1] === 'B') {\r\n        if (Math.abs(dr) !== Math.abs(dc)) return false;\r\n        let stepR = dr > 0 ? 1 : -1;\r\n        let stepC = dc > 0 ? 1 : -1;\r\n        for (let i = 1; i < Math.abs(dr); i++) {\r\n            if (board[from[0] + i * stepR][from[1] + i * stepC]) return false;\r\n        }\r\n        return true;\r\n    }\r\n    // Rook\r\n    if (piece[1] === 'R') {\r\n        if (dr !== 0 && dc !== 0) return false;\r\n        if (dr === 0) {\r\n            let step = dc > 0 ? 1 : -1;\r\n            for (let i = 1; i < Math.abs(dc); i++) {\r\n                if (board[from[0]][from[1] + i * step]) return false;\r\n            }\r\n        } else {\r\n            let step = dr > 0 ? 1 : -1;\r\n            for (let i = 1; i < Math.abs(dr); i++) {\r\n                if (board[from[0] + i * step][from[1]]) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // Queen\r\n    if (piece[1] === 'Q') {\r\n        if (Math.abs(dr) === Math.abs(dc)) {\r\n            let stepR = dr > 0 ? 1 : -1;\r\n            let stepC = dc > 0 ? 1 : -1;\r\n            for (let i = 1; i < Math.abs(dr); i++) {\r\n                if (board[from[0] + i * stepR][from[1] + i * stepC]) return false;\r\n            }\r\n            return true;\r\n        } else if (dr === 0 || dc === 0) {\r\n            if (dr === 0) {\r\n                let step = dc > 0 ? 1 : -1;\r\n                for (let i = 1; i < Math.abs(dc); i++) {\r\n                    if (board[from[0]][from[1] + i * step]) return false;\r\n                }\r\n            } else {\r\n                let step = dr > 0 ? 1 : -1;\r\n                for (let i = 1; i < Math.abs(dr); i++) {\r\n                    if (board[from[0] + i * step][from[1]]) return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // King\r\n    if (piece[1] === 'K') {\r\n        if (Math.abs(dr) <= 1 && Math.abs(dc) <= 1) return true;\r\n        // TODO: Castling\r\n        return false;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction isCheckmate(color) {\r\n    // Demo: check if king is captured\r\n    let king = color + 'K';\r\n    for (let r = 0; r < 8; r++) for (let c = 0; c < 8; c++) if (board[r][c] === king) return false;\r\n    return true;\r\n}\r\n\r\nfunction aiMove() {\r\n    // Smarter AI: pick the best move based on material gain and safety\r\n    const pieceValues = { K: 1000, Q: 9, R: 5, B: 3, N: 3, P: 1 };\r\n    let moves = [];\r\n    for (let r = 0; r < 8; r++) {\r\n        for (let c = 0; c < 8; c++) {\r\n            const piece = board[r][c];\r\n            if (piece && piece[0] === 'b') {\r\n                for (let dr = 0; dr < 8; dr++) {\r\n                    for (let dc = 0; dc < 8; dc++) {\r\n                        if (isValidMove([r, c], [dr, dc], 'b')) {\r\n                            let score = 0;\r\n                            const target = board[dr][dc];\r\n                            if (target && target[0] === 'w') {\r\n                                score += pieceValues[target[1]] || 0;\r\n                            }\r\n                            // Simulate move and check if piece is immediately capturable\r\n                            const original = board[dr][dc];\r\n                            board[dr][dc] = piece;\r\n                            board[r][c] = null;\r\n                            let safe = true;\r\n                            for (let rr = 0; rr < 8; rr++) {\r\n                                for (let cc = 0; cc < 8; cc++) {\r\n                                    const opp = board[rr][cc];\r\n                                    if (opp && opp[0] === 'w' && isValidMove([rr, cc], [dr, dc], 'w')) {\r\n                                        safe = false;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (!safe) break;\r\n                            }\r\n                            board[r][c] = piece;\r\n                            board[dr][dc] = original;\r\n                            if (safe) score += 0.5; // prefer safe moves\r\n                            moves.push({ from: [r, c], to: [dr, dc], score });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (moves.length === 0) return;\r\n    moves.sort((a, b) => b.score - a.score);\r\n    const best = moves[0];\r\n    movePiece(best.from, best.to);\r\n    renderBoard();\r\n}\r\n\r\nfunction setMode(m) {\r\n    mode = m;\r\n    resetGame();\r\n}\r\n\r\nfunction resetGame() {\r\n    board = initialBoard();\r\n    selected = null;\r\n    turn = 'w';\r\n    gameOver = false;\r\n    renderBoard();\r\n    if (mode === 'ai' && turn === 'b') setTimeout(aiMove, 500);\r\n}\r\n\r\ndocument.getElementById('mode-human').onclick = () => setMode('human');\r\ndocument.getElementById('mode-ai').onclick = () => setMode('ai');\r\n\r\n// Start game\r\nmode = 'human';\r\nresetGame();"]}