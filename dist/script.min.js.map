{"version":3,"sources":["script.js"],"names":["gridSize","boxes","shuffle","array","i","length","j","Math","random","_ref","createBoxes","Array","from","_","renderBoxes","container","document","getElementById","forEach","num","idx","box","createElement","classList","add","textContent","moveBox","appendChild","indexOf","addEventListener","emptyIdx","isAdjacent","_ref2","isSolved","setTimeout","alert","floor","idx1","idx2","col2","abs","col1","row1","row2","window","onload"],"mappings":"aACA,IAAMA,SAAW,EADjBC,MAAA,GAEA,SAASC,QAATC,GAGC,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAO,EAAJD,EAAOA,IAAK,CAD5C,IAAAE,EAASJ,KAAQC,MAAjBI,KAAwBC,UAAAJ,EAAA,IACoBK,EAAxBJ,CAAAA,EAAnBC,GAAgCH,EAAOC,IAAvCD,EAAKC,GAAsCK,EAAA,GAAjCN,EAAGA,GAA8BM,EAAA,GAAA,OAAAN,EAG1C,SAAAO,cAEDT,MAAAC,QAGAD,MAAQU,MAAMC,KAAK,CAAEP,OAAQL,SAAWA,UAAY,SAACa,EAAGT,GAAJ,OAAUA,KAG9DU,cAHqBT,SAAAA,cAAF,IAAiCU,EAAAC,SAAAC,eAAA,kBAAAF,EAAUX,UAAV,GAAAH,MACpDiB,QAAA,SAAAC,EAAAC,GASC,IAAMC,EAAML,SAASM,cAAc,OARpCrB,EAAAA,UAAQC,IAAQD,OACL,IAAXa,GACAO,EAAAE,UAAAC,IAAA,SAUEH,EAAII,YAAc,KAPpBJ,EAAMN,YAAYC,EAClBD,EAAAA,iBAAsB,QAAtB,WAAA,OAAAW,QAAAN,MAECL,EAASY,YAAYL,KAGpBD,SAAGK,QAACH,GACJF,IAAAA,EAAII,MAAcG,QAAlB,GAKDb,GAJO,CACNM,EAAII,EACJJ,EAAIQ,EAA0BC,EAAA9B,SAAA8B,EAA9B9B,UAES2B,SAAVP,IAAAW,WAAAX,EAAAU,GAAA,CAAA,IAAAE,EAVD,CAAA/B,MAAA6B,GAAA7B,MAAAmB,IAAAnB,MAAAmB,GAUCY,EAAA,GAVD/B,MAAA6B,GAUCE,EAAA,GAEDlB,cAcKmB,YAZNC,WAASR,WAAAA,OAATS,MAAsB,oCAAA,MASsC,SAAAJ,WACzB9B,EAAM6B,GAAtC7B,IAAAA,EADyDM,KAAA6B,MAAAC,EAAArC,UAC7CC,EAAM6B,EADuC9B,SAE1Dc,EAAAA,KAAWsB,MAAAE,EAAAtC,UAWNuC,EAAOD,EAAOtC,SAVnB,OACCkC,IAAAA,GAAW,IAAA3B,KAAAiC,IAAAC,EAAAF,IAAAE,GAAAF,GAAY,IAADhC,KAACiC,IAAAE,EAAAC,GAGzB,SAAAV,WAcA,IAAK,IAAI7B,EAAI,EAAGA,EAAIH,MAAMI,OAAS,EAAGD,IAZvC,GAAAH,MAAS8B,KAAT3B,EAAoBiC,EAAMC,OAAM,EAE/B,OAAA,IAAMG,MAAOJ,MAAOrC,OAApB,GAGAgB,SACE0B,eAAA,aAA0BD,iBAA3B,QACK/B,aAENkC,OAAAC,OAAAnC","file":"script.min.js","sourcesContent":["// Box Puzzle Game (Sliding Puzzle)\r\nconst gridSize = 4;\r\nlet boxes = [];\r\n\r\nfunction shuffle(array) {\r\n\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t[array[i], array[j]] = [array[j], array[i]];\r\n\t}\r\n\treturn array;\r\n}\r\n\r\nfunction createBoxes() {\r\n\tboxes = Array.from({ length: gridSize * gridSize }, (_, i) => i);\r\n\t// Leave last box empty\r\n\tboxes = shuffle(boxes);\r\n\trenderBoxes();\r\n}\r\n\r\nfunction renderBoxes() {\r\n\tconst container = document.getElementById('game-container');\r\n\tcontainer.innerHTML = '';\r\n\tboxes.forEach((num, idx) => {\r\n\t\tconst box = document.createElement('div');\r\n\t\tbox.classList.add('box');\r\n\t\tif (num === 0) {\r\n\t\t\tbox.classList.add('empty');\r\n\t\t\tbox.textContent = '';\r\n\t\t} else {\r\n\t\t\tbox.textContent = num;\r\n\t\t\tbox.addEventListener('click', () => moveBox(idx));\r\n\t\t}\r\n\t\tcontainer.appendChild(box);\r\n\t});\r\n}\r\n\r\nfunction moveBox(idx) {\r\n\tconst emptyIdx = boxes.indexOf(0);\r\n\tconst validMoves = [\r\n\t\temptyIdx - 1,\r\n\t\temptyIdx + 1,\r\n\t\temptyIdx - gridSize,\r\n\t\temptyIdx + gridSize\r\n\t];\r\n\t// Check if clicked box is adjacent to empty\r\n\tif (validMoves.includes(idx) && isAdjacent(idx, emptyIdx)) {\r\n\t\t[boxes[idx], boxes[emptyIdx]] = [boxes[emptyIdx], boxes[idx]];\r\n\t\trenderBoxes();\r\n\t\tif (isSolved()) {\r\n\t\t\tsetTimeout(() => alert('Congratulations! Puzzle solved!'), 100);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction isAdjacent(idx1, idx2) {\r\n\tconst row1 = Math.floor(idx1 / gridSize);\r\n\tconst col1 = idx1 % gridSize;\r\n\tconst row2 = Math.floor(idx2 / gridSize);\r\n\tconst col2 = idx2 % gridSize;\r\n\treturn (\r\n\t\t(row1 === row2 && Math.abs(col1 - col2) === 1) ||\r\n\t\t(col1 === col2 && Math.abs(row1 - row2) === 1)\r\n\t);\r\n}\r\n\r\nfunction isSolved() {\r\n\tfor (let i = 0; i < boxes.length - 1; i++) {\r\n\t\tif (boxes[i] !== i + 1) return false;\r\n\t}\r\n\treturn boxes[boxes.length - 1] === 0;\r\n}\r\n\r\ndocument.getElementById('reset-btn').addEventListener('click', createBoxes);\r\nwindow.onload = createBoxes;\r\n"]}